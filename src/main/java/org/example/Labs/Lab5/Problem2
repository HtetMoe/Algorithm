Data structure : ArrayList with size tripling strategy.

(a) Actual Cost of add
    - Normal Case : The actual cost of a single add operation is 1 unit when there is space in the array.
    - Worst Case  : If the array is full, a resize happens, and the cost includes resizing of the array.

(b) Actual Cost of resize
    -  Every time a resize occurs, the arrayâ€™s size triples.
    -  This involves copying all elements from the old array to the new array.
    -  If the current size of the array is k, the resize operation will copy k elements.

(c) Average Cost using Traditional Worst-Case Analysis
    - In the worst-case scenario, the average cost of an add operation is not constant
    because  resizing (which involves copying all elements) occurs after the array reaches capacity,
    resulting in a high-cost operation.

(d) Specific Scenario Analysis:
Given:
        Current size of the array = 9 (after a resize).
        Size tripling strategy is used.
        Operations: Adding more elements, which will eventually trigger another resize.

(a) What is the Amortized Cost of add?
        Amortized Cost of add = 1
        Each add operation has a constant cost of 1, as long as no resizing is required.


(c) Proving Constant Time Average Cost through Amortized Analysis
    For n operations, the total cost of all add and resize operations results in a constant amortized cost
    due to exponential growth, even though the actual resize cost is high.

   - Conclusion : Amortized cost of both `add` and `resize` is constant due to spreading out resize costs
     over multiple `add` operations.
